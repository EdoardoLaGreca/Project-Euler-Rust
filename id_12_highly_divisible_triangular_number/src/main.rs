/*
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:
        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

fn calculate_value(min_div: i32) -> i64 {

    // Current triangle number
    let mut current_triangle_num = 1;
    
    // Current triangle number's index
    let mut current_triangle_index = 1;

    // Current number of divisors (initialized as
    // 1 because the first is the number itself)
    let mut curr_divs = 1;

    // Keep searching
    while curr_divs < min_div {

        // Generate triangle value
        current_triangle_index += 1;
        current_triangle_num += current_triangle_index;

        // Reset curr_divs
        curr_divs = 1;

        // Check all the numbers between 1 and half of the
        // current triangle number 
        for i in 1..=(current_triangle_num / 2) {
            // If it's a divisor, increase n
            if current_triangle_num % i == 0 {
                curr_divs += 1;
            }
        }
    }

    return current_triangle_num as i64;
}

fn main() {
    // Minimum number of divisors 
    let min_divisors = 500;

    let result: i64 = calculate_value(min_divisors);

    //NOTE: It will take a while to calculate the result.
    println!("{}", result.to_string());
}