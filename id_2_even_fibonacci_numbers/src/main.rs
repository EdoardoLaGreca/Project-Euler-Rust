/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

fn fib(n: u32) -> u32 {

	// First values
	if n == 0 {
		return 0;
	} else if n == 1 {
		return 1;
	} else if n == 2 {
		return 1;
	}

	// First two values (num1 and num2) and their sum (num3)
	let mut num1 = 1;
	let mut num2 = 1;
	let mut num3 = 2;

	// Start at 3 so that if n is 3 it doesn't execute the for loop
	for i in 3..n {
		// Shift value from num2 to num1
		num1 = num2;

		// Shift value from num3 to num2
		num2 = num3;

		// Calculate num3 basing on num1 and num2
		num3 = num1 + num2;
	}

	num3
}

fn main() {

	// Fibonacci function's argument
	let mut i = 1;

	// Sum of even numbers
	let mut sum: u32 = 0;

	// While Fibonacci's numbers are below 4 million
	while fib(i) < 4_000_000 {

		// If Fibonacci of i is even, then add to sum
		if fib(i) % 2 == 0 {
			sum += fib(i);
		}

		i += 1;
	}

	println!("{}", sum);
}
